---
- fail:
    msg: "Unsupported distribution."
  when:
    - ansible_distribution_file_variety == "RedHat" and (ansible_distribution_major_version | int) < 8
    - ansible_distribution_file_variety == "SUSE" and (ansible_distribution_major_version | int) < 12

- name: Check vgname
  command: "vgdisplay {{ vgname }}"
  any_errors_fatal: true

# Scan new SAN disks
- name: Execute scsi rescan
  shell: |
    cd /sys/class/scsi_host
    for s in `ls`
    do
      echo "- - -" > $s/scan
    done

- name: List lsscsi
  # Different distribution may have lsscsi with different options
  command: "{{ lsscsi[ansible_distribution_file_variety] }}"
  register: scsi

# Create array disk_map [{'lunid': 'xxx', 'dev': 'yyy'}] for all disks
- name: Create a map disk_map
  include_tasks: disk_map.yml
  loop: "{{ scsi.stdout_lines }}"

# Extract /dev/sdx of new device from nested loop
# according to the variable new_luns
- set_fact:
    new_dev: "{{ new_dev | default([])  + [item.1.dev] }}"
    new_lunids: "{{ new_lunids | default([])  + [{'dev': item.1.dev, 'id': item.1.lunid}] }}"
  with_nested:
    - "{{ new_luns }}"
    - "{{ disk_map }}"
  when: (item.0|lower) in (item.1.lunid|lower)

- fail:
    msg: "Cannot find any new devices"
  when: new_dev is not defined

- name: Check number of new luns
  fail:
    msg: "Cannot find all new luns. Please check {{ ansible_inventory_sources }}"
  when: ( new_dev | length ) != ( new_luns | length )
  any_errors_fatal: true

- debug:
    msg: 
      - "New LUNs are discovered:"
      - "{{ new_lunids }}"
